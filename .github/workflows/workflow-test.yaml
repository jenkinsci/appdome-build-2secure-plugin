name: Maven CI

on:
#  push:
#    branches:
#      - main
#      - testing-enviorment
#    tags:
#      - v*
#  pull_request:
#    branches:
#      - main
#      - testing-enviorment
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch or tag to run tests on'
        required: true
        default: 'main'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      buildParams:
        description: 'Build parameters in JSON format'
        required: true
        default: '{"teamId":"default-teamId", "signOption":"default-signOption", "appFilePath":"default-appFilePath", "keystoreFilePath":"default-keystoreFilePath", "certificateFilePath":"default-certificateFilePath", "fusionSetId":"default-fusionSetId", "signFingerprint":"default-signFingerprint", "entitlementsPath":"default1,default2", "mobileProvisionProfilesPath":"default1,default2", "buildToTest":"default-buildToTest", "buildWithLogs":"false", "googlePlaySign":"false", "secondOutput":"default-secondOutput"}'
      secretParams:
        description: 'Build parameters in JSON format'
        required: true
        default: '{"APPDOME_API_TOKEN":"default-APPDOME_API_TOKEN", "KEYSTORE_ALIAS":"default-KEYSTORE_ALIAS", "KEYSTORE_KEY_PASS":"default-KEYSTORE_KEY_PASS", "KEYSTORE_PASSWORD":"default-KEYSTORE_PASSWORD", "P12_PASSWORD":"default-P12_PASSWORD"}'
      logLevel:
        description: 'Set the log level for Maven builds'
        required: false
        default: 'info'
        type: choice
        options:
          - info
          - warning
          - debug
      dispatch_id:
        description: 'run_unique_id'
        required: true
        type: string

jobs:
  build-and-test:
    name: run_${{ github.event.inputs.dispatch_id }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'  # Updated to temurin
          cache: 'maven'


      - name: Install jq
        run: sudo apt-get install jq

      - name: Download files from AWS S3 URLs
        id: download_files
        run: |
          # Extract parameters from JSON input
          buildParams='${{ github.event.inputs.buildParams }}'
          appFilePath=$(echo $buildParams | jq -r '.appFilePath')
          keystoreFilePath=$(echo $buildParams | jq -r '.keystoreFilePath')
          certificateFilePath=$(echo $buildParams | jq -r '.certificateFilePath')
          entitlementsPath=$(echo $buildParams | jq -r '.entitlementsPath')
          mobileProvisionProfilesPath=$(echo $buildParams | jq -r '.mobileProvisionProfilesPath')
          
          # Initialize local file paths
          localAppFilePath=""
          localKeystoreFilePath=""
          localCertificateFilePath=""
          localEntitlementsPaths=""
          localMobileProvisionPaths=""
          
          # Download files using curl and store them locally, only if they are not "None"
          if [ "$appFilePath" != "None" ]; then
              curl -L -o /tmp/app.apk "$appFilePath"
              echo "Downloaded app file to /tmp/app.apk"
              localAppFilePath="/tmp/app.apk"
          else
              echo "App file path is 'None', skipping download."
          fi
          
          if [ "$keystoreFilePath" != "None" ]; then
              curl -L -o /tmp/keystore.jks "$keystoreFilePath"
              echo "Downloaded keystore file to /tmp/keystore.jks"
              localKeystoreFilePath="/tmp/keystore.jks"
          else
              echo "Keystore file path is 'None', skipping download."
          fi
          
          if [ "$certificateFilePath" != "None" ]; then
              curl -L -o /tmp/certificate.pem "$certificateFilePath"
              echo "Downloaded certificate file to /tmp/certificate.pem"
              localCertificateFilePath="/tmp/certificate.pem"
          else
              echo "Certificate file path is 'None', skipping download."
          fi
          
          # Download entitlementsPath files, only if they are not "None"
          if [ "$entitlementsPath" != "None" ]; then
              IFS=',' read -ra entitlementUrls <<< "$entitlementsPath"
              for url in "${entitlementUrls[@]}"; do
                  fileName="/tmp/$(basename $url)"
                  curl -L -o "$fileName" "$url"
                  if [ -z "$localEntitlementsPaths" ]; then
                      localEntitlementsPaths="$fileName"
                  else
                      localEntitlementsPaths="$localEntitlementsPaths,$fileName"
                  fi
              done
              echo "Downloaded entitlement files: $localEntitlementsPaths"
          else
              echo "Entitlements path is 'None', skipping download."
          fi
          
          # Download mobileProvisionProfilesPath files, only if they are not "None"
          if [ "$mobileProvisionProfilesPath" != "None" ]; then
              IFS=',' read -ra provisionUrls <<< "$mobileProvisionProfilesPath"
              for url in "${provisionUrls[@]}"; do
                  fileName="/tmp/$(basename $url)"
                  curl -L -o "$fileName" "$url"
                  if [ -z "$localMobileProvisionPaths" ];then
                      localMobileProvisionPaths="$fileName"
                  else
                      localMobileProvisionPaths="$localMobileProvisionPaths,$fileName"
                  fi
              done
              echo "Downloaded mobile provision profiles: $localMobileProvisionPaths"
          else
              echo "Mobile provision profiles path is 'None', skipping download."
          fi
          
          # Set outputs for next steps using Environment Files (Optional)
          echo "appFilePath=$localAppFilePath"
          echo "keystoreFilePath=$localKeystoreFilePath"
          echo "certificateFilePath=$localCertificateFilePath"
          echo "entitlementsPath=$localEntitlementsPaths"
          echo "mobileProvisionProfilesPath=$localMobileProvisionPaths"


      - name: Parse Build Params
        id: parse_params
        run: |
          echo "Parsing build parameters..."
          buildParams=$(echo '${{ github.event.inputs.buildParams }}' | jq -r '.')
          echo "teamId=$(echo "$buildParams" | jq -r '.teamId')" >> $GITHUB_ENV
          echo "signOption=$(echo "$buildParams" | jq -r '.signOption')" >> $GITHUB_ENV
          echo "appFilePath=$(echo "$buildParams" | jq -r '.appFilePath')" >> $GITHUB_ENV
          echo "keystoreFilePath=$(echo "$buildParams" | jq -r '.keystoreFilePath')" >> $GITHUB_ENV
          echo "certificateFilePath=$(echo "$buildParams" | jq -r '.certificateFilePath')" >> $GITHUB_ENV
          echo "fusionSetId=$(echo "$buildParams" | jq -r '.fusionSetId')" >> $GITHUB_ENV
          echo "signFingerprint=$(echo "$buildParams" | jq -r '.signFingerprint')" >> $GITHUB_ENV
          echo "entitlementsPath=$(echo "$buildParams" | jq -r '.entitlementsPath')" >> $GITHUB_ENV
          echo "mobileProvisionProfilesPath=$(echo "$buildParams" | jq -r '.mobileProvisionProfilesPath')" >> $GITHUB_ENV
          echo "buildToTest=$(echo "$buildParams" | jq -r '.buildToTest')" >> $GITHUB_ENV
          echo "buildWithLogs=$(echo "$buildParams" | jq -r '.buildWithLogs')" >> $GITHUB_ENV
          echo "googlePlaySign=$(echo "$buildParams" | jq -r '.googlePlaySign')" >> $GITHUB_ENV
          echo "secondOutput=$(echo "$buildParams" | jq -r '.secondOutput')" >> $GITHUB_ENV

      - name: Parse Secret Params
        id: parse_secrets
        run: |
          echo "Parsing secret parameters..."
          secretParams=$(echo '${{ github.event.inputs.secretParams }}' | jq -r '.')
          echo "APPDOME_API_TOKEN_PIPELINE=$(echo "$secretParams" | jq -r '.APPDOME_API_TOKEN')" >> $GITHUB_ENV
          echo "KEYSTORE_ALIAS_PIPELINE=$(echo "$secretParams" | jq -r '.KEYSTORE_ALIAS')" >> $GITHUB_ENV
          echo "KEYSTORE_KEY_PASS_PIPELINE=$(echo "$secretParams" | jq -r '.KEYSTORE_KEY_PASS')" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD_PIPELINE=$(echo "$secretParams" | jq -r '.KEYSTORE_PASSWORD')" >> $GITHUB_ENV
          echo "P12_PASSWORD_PIPELINE=$(echo "$secretParams" | jq -r '.P12_PASSWORD')" >> $GITHUB_ENV

      - name: Print Env Variables
        run: |
          echo ${{ env.APPDOME_API_TOKEN_PIPELINE }}
          echo ${{ env.KEYSTORE_ALIAS_PIPELINE }}
          echo ${{ env.KEYSTORE_KEY_PASS_PIPELINE }}
          echo ${{ env.KEYSTORE_PASSWORD_PIPELINE }}
          echo ${{ env.P12_PASSWORD_PIPELINE }}

          
      - name: Build and Test with Maven
        run: |
          echo "Using the following local file paths for the build:"
          echo "App File Path: $localAppFilePath"
          echo "Keystore File Path: $localKeystoreFilePath"
          echo "Certificate File Path: $localCertificateFilePath"
          echo "Entitlements Path: $localEntitlementsPaths"
          echo "Mobile Provision Profiles Path: $localMobileProvisionPaths"
          echo "Using the following parameters:"
          echo "Team ID: $teamId"
          echo "Sign Option: $signOption"
          echo "App File Path: 
          echo "Keystore File Path: 
          echo "Certificate File Path: 
          echo "Fusion Set ID: $fusionSetId"
          echo "Sign Fingerprint: $signFingerprint"
          echo "Entitlements Path: 
          echo "Mobile Provision Profiles Path: 
          echo "Build to Test: $buildToTest"
          echo "Build with Logs: $buildWithLogs"
          echo "Google Play Sign: $googlePlaySign"
          echo "Second Output: $secondOutput"
          echo "Environment: ${{ github.event.inputs.environment }}"
          
          # Run the Maven command with extracted parameters
          # Run the Maven command with local file paths
          mvn -V --color always -ntp -B -Djenkins.test.timeout=700 -Dsurefire.printSummary=true -Dsurefire.useFile=false clean verify \
          -Dtest=PipelineTest#workFlowTest \
          -DteamId="$teamId" \
          -DsignOption="$signOption" \
          -DappFilePath="$localAppFilePath" \
          -DkeystoreFilePath="$localKeystoreFilePath" \
          -DcertificateFilePath="$localCertificateFilePath" \
          -DfusionSetId="$fusionSetId" \
          -DsignFingerprint="$signFingerprint" \
          -DentitlementsPath="$localEntitlementsPaths" \
          -DmobileProvisionProfilesPath="$localMobileProvisionPaths" \
          -DbuildToTest="$buildToTest" \
          -DbuildWithLogs="$buildWithLogs" \
          -DgooglePlaySign="$googlePlaySign" \
          -DsecondOutput="$secondOutput" \
          -Denvironment="${{ github.event.inputs.environment }}" \
          package
        env:
          APPDOME_API_TOKEN: ${{ env.APPDOME_API_TOKEN_PIPELINE }}
          KEYSTORE_ALIAS: ${{ env.KEYSTORE_ALIAS_PIPELINE }}
          KEYSTORE_KEY_PASS: ${{ env.KEYSTORE_KEY_PASS_PIPELINE }}
          KEYSTORE_PASSWORD: ${{ env.KEYSTORE_PASSWORD_PIPELINE }}
          P12_PASSWORD: ${{ env.P12_PASSWORD_PIPELINE }}


